// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: rating.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addRating = `-- name: AddRating :one
INSERT INTO rating (price, quality, booth_id)
VALUES ($1, $2, $3)
RETURNING id, price, quality, created_at, booth_id
`

type AddRatingParams struct {
	Price   int32     `json:"price"`
	Quality int32     `json:"quality"`
	BoothID uuid.UUID `json:"booth_id"`
}

func (q *Queries) AddRating(ctx context.Context, arg AddRatingParams) (Rating, error) {
	row := q.db.QueryRowContext(ctx, addRating, arg.Price, arg.Quality, arg.BoothID)
	var i Rating
	err := row.Scan(
		&i.ID,
		&i.Price,
		&i.Quality,
		&i.CreatedAt,
		&i.BoothID,
	)
	return i, err
}

const listRatingsByBoothId = `-- name: ListRatingsByBoothId :many
SELECT id, price, quality, created_at, booth_id
FROM rating
WHERE rating.booth_id = $1
ORDER BY rating.created_at DESC
`

func (q *Queries) ListRatingsByBoothId(ctx context.Context, boothID uuid.UUID) ([]Rating, error) {
	rows, err := q.db.QueryContext(ctx, listRatingsByBoothId, boothID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Rating{}
	for rows.Next() {
		var i Rating
		if err := rows.Scan(
			&i.ID,
			&i.Price,
			&i.Quality,
			&i.CreatedAt,
			&i.BoothID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
