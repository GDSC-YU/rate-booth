// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: booth.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addBooth = `-- name: AddBooth :one
INSERT INTO booth (name, logo_url, description, twitter_url, instagram_url)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, logo_url, description, twitter_url, instagram_url
`

type AddBoothParams struct {
	Name         string `json:"name"`
	LogoUrl      string `json:"logo_url"`
	Description  string `json:"description"`
	TwitterUrl   string `json:"twitter_url"`
	InstagramUrl string `json:"instagram_url"`
}

func (q *Queries) AddBooth(ctx context.Context, arg AddBoothParams) (Booth, error) {
	row := q.db.QueryRowContext(ctx, addBooth,
		arg.Name,
		arg.LogoUrl,
		arg.Description,
		arg.TwitterUrl,
		arg.InstagramUrl,
	)
	var i Booth
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LogoUrl,
		&i.Description,
		&i.TwitterUrl,
		&i.InstagramUrl,
	)
	return i, err
}

const getBoothById = `-- name: GetBoothById :one
SELECT id, name, logo_url, description, twitter_url, instagram_url
FROM booth
WHERE booth.id = $1
`

func (q *Queries) GetBoothById(ctx context.Context, boothID uuid.UUID) (Booth, error) {
	row := q.db.QueryRowContext(ctx, getBoothById, boothID)
	var i Booth
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LogoUrl,
		&i.Description,
		&i.TwitterUrl,
		&i.InstagramUrl,
	)
	return i, err
}

const listBooths = `-- name: ListBooths :many
SELECT id, name, logo_url, description, twitter_url, instagram_url
FROM booth
`

func (q *Queries) ListBooths(ctx context.Context) ([]Booth, error) {
	rows, err := q.db.QueryContext(ctx, listBooths)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Booth{}
	for rows.Next() {
		var i Booth
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.LogoUrl,
			&i.Description,
			&i.TwitterUrl,
			&i.InstagramUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
